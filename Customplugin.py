# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Customplugin
                                 A QGIS plugin
 Customplugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-12-04
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Nikola
        email                : perisicnikola37@gmail.com
 ***************************************************************************/


/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox
from qgis.core import QgsProject, Qgis
from qgis.core import QgsVectorLayer, QgsWkbTypes, QgsFeature
import datetime

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the dialog
from .Customplugin_dialog import CustompluginDialog
import os.path


class Customplugin:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value("locale/userLocale")[0:2]
        locale_path = os.path.join(
            self.plugin_dir, "i18n", "Customplugin_{}.qm".format(locale)
        )

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr("&Customplugin")

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        return QCoreApplication.translate("Customplugin", message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self):
        icon_path_duration = ":/plugins/Customplugin/taxi_icon.png"
        self.add_action(
            icon_path_duration,
            text=self.tr("MERGE"),
            callback=self.merge_layers,
            parent=self.iface.mainWindow(),
        )

        icon_path_duration = ":/plugins/Customplugin/icon.png"
        self.add_action(
            icon_path_duration,
            text=self.tr("Calculate Total Duration"),
            callback=self.calculate_total_duration,
            parent=self.iface.mainWindow(),
        )

        icon_path_duration = ":/plugins/Customplugin/icon.png"
        self.add_action(
            icon_path_duration,
            text=self.tr("Calculate Average Distance"),
            callback=self.calculate_average_distance,
            parent=self.iface.mainWindow(),
        )

        icon_path_duration = ":/plugins/Customplugin/icon.png"
        self.add_action(
            icon_path_duration,
            text=self.tr("Calculate Average Duration"),
            callback=self.calculate_average_duration,
            parent=self.iface.mainWindow(),
        )

        icon_path_duration = ":/plugins/Customplugin/icon.png"
        self.add_action(
            icon_path_duration,
            text=self.tr("Calculate Average Speed"),
            callback=self.calculate_average_speed,
            parent=self.iface.mainWindow(),
        )

        icon_path_duration = ":/plugins/Customplugin/icon.png"
        self.add_action(
            icon_path_duration,
            text=self.tr("Calculate Duration Intervals"),
            callback=self.calculate_duration_intervals,
            parent=self.iface.mainWindow(),
        )

        icon_path_duration = ":/plugins/Customplugin/icon.png"
        self.add_action(
            icon_path_duration,
            text=self.tr("Calculate Total Distance"),
            callback=self.calculate_total_distance,
            parent=self.iface.mainWindow(),
        )

        # will be set False in run()
        self.first_start = True

    def calculate_total_duration(self):
        """Funkcija za izračunavanje ukupnog trajanja u minutama iz sloja 'Istorija_ruta'"""
        try:
            # Naziv ciljnog sloja
            target_layer_name = "Istorija_ruta"

            # Pronađi ciljni sloj
            project = QgsProject.instance()
            layers = project.mapLayersByName(target_layer_name)

            if not layers:
                raise Exception(
                    f"Sloj '{target_layer_name}' nije pronađen. Provjerite ime sloja u QGIS-u."
                )

            target_layer = layers[0]

            # Lista za prikupljanje vremena (u minutama)
            durations = []

            # Iteriraj kroz sve entitete (features) u sloju
            for feature in target_layer.getFeatures():
                if feature["Trajanje"] is not None:
                    durations.append(feature["Trajanje"])

            # Ukupno trajanje u minutama
            if durations:
                total_duration_minutes = sum(durations)
                total_duration_hours = total_duration_minutes / 60  # Pretvori u sate
                QMessageBox.information(
                    None,
                    "Ukupno trajanje",
                    f"Ukupno trajanje je: {total_duration_hours:.2f} sati",
                    QMessageBox.Ok,
                )
            else:
                QMessageBox.warning(
                    None, "Greška", "Nema podataka za trajanje.", QMessageBox.Ok
                )
        except Exception as e:
            QMessageBox.warning(
                None, "Greška", f"Došlo je do greške: {str(e)}", QMessageBox.Ok
            )

    def calculate_average_distance(self):
        try:
            target_layer_name = "Istorija_ruta"
            project = QgsProject.instance()
            layers = project.mapLayersByName(target_layer_name)

            if not layers:
                raise Exception(f"Sloj '{target_layer_name}' nije pronađen.")

            target_layer = layers[0]

            distances = []

            for feature in target_layer.getFeatures():
                if feature["Udaljenost"] is not None:
                    distances.append(feature["Udaljenost"])

            if distances:
                average_distance = sum(distances) / len(distances)
                QMessageBox.information(
                    None,
                    "Prosječna kilometraža",
                    f"Prosječna kilometraža je: {average_distance:.2f} km",
                    QMessageBox.Ok,
                )
            else:
                QMessageBox.warning(
                    None,
                    "Greška",
                    "Nema vrijednosti za udaljenost u sloju.",
                    QMessageBox.Ok,
                )
        except Exception as e:
            QMessageBox.warning(
                None, "Greška", f"Došlo je do greške: {str(e)}", QMessageBox.Ok
            )

    def calculate_average_duration(self):
        try:
            target_layer_name = "Istorija_ruta"
            project = QgsProject.instance()
            layers = project.mapLayersByName(target_layer_name)

            if not layers:
                raise Exception(f"Sloj '{target_layer_name}' nije pronađen.")

            target_layer = layers[0]

            durations = []

            for feature in target_layer.getFeatures():
                if feature["Trajanje"] is not None:
                    durations.append(feature["Trajanje"])

            if durations:
                average_duration = sum(durations) / len(durations)
                QMessageBox.information(
                    None,
                    "Prosječno trajanje vožnji",
                    f"Prosječno trajanje vožnji je: {average_duration:.2f} minuta",
                    QMessageBox.Ok,
                )
            else:
                QMessageBox.warning(
                    None,
                    "Greška",
                    "Nema vrednosti za trajanje u sloju.",
                    QMessageBox.Ok,
                )
        except Exception as e:
            QMessageBox.warning(
                None, "Greška", f"Došlo je do greške: {str(e)}", QMessageBox.Ok
            )

    def calculate_average_speed(self):
        try:
            target_layer_name = "Istorija_ruta"
            project = QgsProject.instance()
            layers = project.mapLayersByName(target_layer_name)

            if not layers:
                raise Exception(f"Sloj '{target_layer_name}' nije pronađen.")

            target_layer = layers[0]

            speeds = []

            for feature in target_layer.getFeatures():
                distance = feature["Udaljenost"]
                duration = feature["Trajanje"]
                if distance is not None and duration is not None and duration > 0:
                    speed = distance / (duration / 60)  # Convert duration to hours
                    speeds.append(speed)

            if speeds:
                average_speed = sum(speeds) / len(speeds)
                QMessageBox.information(
                    None,
                    "Prosječna brzina",
                    f"Prosječna brzina je: {average_speed:.2f} km/h",
                    QMessageBox.Ok,
                )
            else:
                QMessageBox.warning(
                    None, "Greška", "Nema podataka za brzinu.", QMessageBox.Ok
                )
        except Exception as e:
            QMessageBox.warning(
                None, "Greška", f"Došlo je do greške: {str(e)}", QMessageBox.Ok
            )

    def calculate_duration_intervals(self):
        try:
            target_layer_name = "Istorija_ruta"
            project = QgsProject.instance()
            layers = project.mapLayersByName(target_layer_name)

            if not layers:
                raise Exception(f"Sloj '{target_layer_name}' nije pronađen.")

            target_layer = layers[0]

            duration_intervals = {0: 0, 30: 0, 60: 0, 120: 0}

            for feature in target_layer.getFeatures():
                duration = feature["Trajanje"]
                if duration is not None:
                    if duration <= 30:
                        duration_intervals[0] += 1
                    elif duration <= 60:
                        duration_intervals[30] += 1
                    elif duration <= 120:
                        duration_intervals[60] += 1
                    else:
                        duration_intervals[120] += 1

            result = "\n".join(
                [
                    f"Interval {key}-{key+30 if key != 120 else '∞'} minuta: {count} ruta"
                    for key, count in duration_intervals.items()
                ]
            )
            QMessageBox.information(
                None, "Distribucija trajanja", result, QMessageBox.Ok
            )
        except Exception as e:
            QMessageBox.warning(
                None, "Greška", f"Došlo je do greške: {str(e)}", QMessageBox.Ok
            )

    def merge_layers(self):
        try:
            target_layer_name = "Istorija_ruta"
            project = QgsProject.instance()
            layers = project.mapLayersByName(target_layer_name)

            if not layers:
                raise Exception(f"Sloj '{target_layer_name}' nije pronađen.")

            target_layer = layers[0]

            layers_to_merge = [
                layer
                for layer in project.mapLayers().values()
                if layer.type() == QgsVectorLayer.VectorLayer
                and layer.geometryType() == QgsWkbTypes.LineGeometry
                and layer.name() != target_layer_name
            ]

            if not layers_to_merge:
                print("Nema novih slojeva za dodavanje.")
            else:
                target_layer.startEditing()

                for layer in layers_to_merge:
                    print(f"Spajam sloj: {layer.name()}")

                    for feature in layer.getFeatures():
                        new_feature = QgsFeature(target_layer.fields())
                        new_feature.setGeometry(feature.geometry())

                        if (
                            "DIST_KM" in feature.fields().names()
                            and "Udaljenost" in target_layer.fields().names()
                        ):
                            new_feature["Udaljenost"] = feature["DIST_KM"]

                        if (
                            "DURATION_H" in feature.fields().names()
                            and "Trajanje" in target_layer.fields().names()
                        ):
                            duration_in_hours = feature["DURATION_H"]
                            duration_in_minutes = duration_in_hours * 60
                            new_feature["Trajanje"] = duration_in_minutes

                        if "Taksi_ID" in target_layer.fields().names():
                            new_feature["Taksi_ID"] = (
                                f"Taksi_{datetime.datetime.now().strftime('%Y%m%d%H%M%S')}"
                            )

                        target_layer.addFeature(new_feature)

                    QgsProject.instance().removeMapLayer(layer)

                target_layer.commitChanges()
                print("Svi novi slojevi su spojeni u sloj 'Istorija_Ruta'.")
        except Exception as e:
            QMessageBox.warning(
                None, "Greška", f"Došlo je do greške: {str(e)}", QMessageBox.Ok
            )

    def calculate_total_distance(self):
        try:
            target_layer_name = "Istorija_ruta"
            project = QgsProject.instance()
            layers = project.mapLayersByName(target_layer_name)

            if not layers:
                raise Exception(f"Sloj '{target_layer_name}' nije pronađen.")

            target_layer = layers[0]

            total_distance = sum(
                [
                    feature["Udaljenost"]
                    for feature in target_layer.getFeatures()
                    if feature["Udaljenost"] is not None
                ]
            )

            QMessageBox.information(
                None,
                "Ukupna udaljenost",
                f"Ukupna udaljenost je: {total_distance:.2f} km",
                QMessageBox.Ok,
            )
        except Exception as e:
            QMessageBox.warning(
                None, "Greška", f"Došlo je do greške: {str(e)}", QMessageBox.Ok
            )

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(self.tr("&Customplugin"), action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = CustompluginDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
